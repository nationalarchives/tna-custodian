name: 'Terraform apply'
on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        description: The environment to deploy against.
        type: string
        default: intg
      project:
        required: true
        description: The project to run this for
        type: choice
        options:
          - tdr
          - dr2
permissions:
  id-token: write
  contents: write
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      account-number-secret: ${{ steps.set-environment-names.outputs.account_number_secret }}
      project-upper: ${{ steps.set-environment-names.outputs.project_upper }}
    steps:
      - uses: actions/checkout@v3
      - id: set-environment-names
        run: |
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              project = "${{ github.event.inputs.project }}"
              evn = "${{ github.event.inputs.environment }}"
              print(f"project_upper={project.upper()}", file=fh)
              print(f"account_number_secret={project.upper()}_{env.upper()}_ACCOUNT_NUMBER", file=fh)
        shell: python
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets[format('{0}_WORKFLOW_PAT', needs.setup.outputs.project-upper)] }}
      - name: Configure AWS credentials for Lambda
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets[format('{0}_TERRAFORM_ROLE', needs.setup.outputs.project-upper)] }}
          aws-region: eu-west-2
          role-session-name: TerraformRole
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.2
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_account_number: ${{ secrets[needs.setup.outputs.account-number-secret] }}
          TF_VAR_project: ${{ github.event.inputs.project }}
        run: |
          terraform init -backend-config="bucket=${{ needs.setup.outputs.state-bucket }}" --backend-config="dynamodb_table=${{ needs.setup.outputs.dynamo-table }}"
          terraform workspace select ${{ github.event.inputs.environment }}
          pip install boto3
          terraform plan -no-color -out=out > /dev/null
          terraform show -no-color out > out.plan
          python $GITHUB_WORKSPACE/.github/scripts/logs.py out.plan "${{ github.run_id }}${{ github.run_attempt }}" ${{ github.event.inputs.environment }}
      - uses: nationalarchives/dr2-github-actions/.github/actions/slack-send@temp-branch
        with:
          message: |
            :book: Terraform plan ready for repository tna-custodian environment ${{ github.event.inputs.environment }}
            :log: View the <${{ steps.plan.outputs.log-url }}|plan logs> in the management account.
            :white_check_mark: <https://github.com/nationalarchives/tna-custodian/actions/runs/${{ github.run_id }}|Approve the workflow>
          slack-url: ${{ secrets[format('{0}_SLACK_WEBHOOK', needs.setup.outputs.project-upper)] }}
  apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs:
      - plan
      - setup
    environment: ${{ github.event.inputs.project }}-${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets[format('{0}_WORKFLOW_PAT', needs.setup.outputs.project-upper)] }}
      - name: Configure AWS credentials for Lambda
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets[format('{0}_TERRAFORM_ROLE', needs.setup.outputs.project-upper)] }}
          aws-region: eu-west-2
          role-session-name: TerraformRole
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.2
      - name: Run apply
        env:
          TF_VAR_account_number: ${{ secrets.ACCOUNT_NUMBER }}
          TF_VAR_project: ${{ github.event.inputs.project }}
        run: |
          terraform init -backend-config="bucket=${{ secrets[format('{0}_STATE_BUCKET', needs.setup.outputs.project-upper)] }}" --backend-config="dynamodb_table=${{ secrets[format('{0}_TERRAFORM_ROLE', needs.setup.outputs.project-upper)] }}"
          terraform workspace select ${{ github.event.inputs.environment }}
          terraform apply --auto-approve > /dev/null
      - id: next-tag
        uses: nationalarchives/dr2-github-actions/.github/actions/get-next-version@temp-branch
        with:
          repo-name: tna-custodian
      - run: |
          git tag ${{ steps.next-tag.outputs.next-version }}
          git push origin ${{ steps.next-tag.outputs.next-version }}
          git branch -f release-${{ github.event.inputs.environment }} HEAD
          git push -f origin release-${{ github.event.inputs.environment }}
      - name: Send failure message
        if: failure()
        uses: nationalarchives/dr2-github-actions/.github/actions/slack-send@temp-branch
        with:
          message: ":warning: tna-custodian deploy failed for ${{ github.event.inputs.environment }}"
          slack-url: ${{ secrets[format('{0}_SLACK_WEBHOOK', needs.setup.outputs.project-upper)] }}
      - name: Send success message
        uses: nationalarchives/dr2-github-actions/.github/actions/slack-send@temp-branch
        with:
          message: ":white_check_mark: tna-custodian deploy successful for ${{ github.event.inputs.environment }}"
          slack-url: ${{ secrets[format('{0}_SLACK_WEBHOOK', needs.setup.outputs.project-upper)] }}
  custodian:
    environment: ${{ github.event.inputs.project }}-${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs:
      - setup
      - apply
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets[format('{0}_WORKFLOW_PAT', needs.setup.outputs.project-upper)] }}
      - name: Configure AWS credentials for Cloud Custodian
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets[format('{0}_CUSTODIAN_ROLE', needs.setup.outputs.project-upper)] }}
          aws-region: eu-west-2
          role-session-name: CustodianRole
      - run: |
          pip install ruamel.yaml c7n c7n-mailer c7n-guardian --ignore-installed six
          cd accounts
          ../custodian/scripts/deploy-custodian.sh ${{ needs.setup.outputs.project-upper }} ${{ github.event.inputs.environment }} ${{ steps.set-environment-names.outputs.email }} ${{ secrets[format('{0}_MANAGEMENT_ACCOUNT', needs.setup.outputs.project-upper)] }}
      - uses: nationalarchives/tdr-github-actions/.github/actions/slack-send@main
        with:
          message: |
            Cloud Custodian deployed to ${{ github.event.inputs.environment }} AWS account
          slack-url: ${{ secrets[format('{0}_SLACK_WEBHOOK', needs.setup.outputs.project-upper)] }}
